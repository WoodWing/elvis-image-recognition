/**
 * Emrays REST API V2
 * Detect emtions in images and text using the Emrays API.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: connect@emrays.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import Promise = require('bluebird');

let defaultBasePath = 'https://www8.emrays.com/api/v2';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

/**
* Individual emotion scores.
*/
export class Emotions {
    /**
    * Laughter score.
    */
    'laughter'?: number;
    /**
    * Surprise score.
    */
    'surprise'?: number;
    /**
    * Love score.
    */
    'love'?: number;
    /**
    * Anger score.
    */
    'anger'?: number;
    /**
    * Sadness score.
    */
    'sadness'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "laughter",
            "baseName": "laughter",
            "type": "number"
        },
        {
            "name": "surprise",
            "baseName": "surprise",
            "type": "number"
        },
        {
            "name": "love",
            "baseName": "love",
            "type": "number"
        },
        {
            "name": "anger",
            "baseName": "anger",
            "type": "number"
        },
        {
            "name": "sadness",
            "baseName": "sadness",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Emotions.attributeTypeMap;
    }
}

/**
* Image emotion details.
*/
export class ImageEmotions {
    /**
    * Image file name references.
    */
    'input'?: Array<string>;
    /**
    * Api call duration.
    */
    'time'?: number;
    /**
    * Version
    */
    'version'?: number;
    /**
    * Raw input.
    */
    'raw'?: string;
    'emotions'?: Array<Emotions>;
    /**
    * Compound emotion.
    */
    'compound'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "input",
            "baseName": "input",
            "type": "Array<string>"
        },
        {
            "name": "time",
            "baseName": "time",
            "type": "number"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "number"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "string"
        },
        {
            "name": "emotions",
            "baseName": "emotions",
            "type": "Array<Emotions>"
        },
        {
            "name": "compound",
            "baseName": "compound",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ImageEmotions.attributeTypeMap;
    }
}

/**
* Text emotion details.
*/
export class TextEmotions {
    /**
    * Parsed input text. For a single input, this is an array of strings where emotion analysis is performed word-by-word. For multiple inputs it simple contains the provided inputs.
    */
    'input'?: Array<string>;
    /**
    * Api call duration.
    */
    'time'?: number;
    /**
    * Version.
    */
    'version'?: number;
    /**
    * Raw input.
    */
    'raw'?: string;
    /**
    * Individual emotion scores, sorted per provided input text.
    */
    'emotions'?: Array<Emotions>;
    /**
    * Compound emotions. This contains a single string value if one input is provided and an array of string values when multiple inputs are provided.
    */
    'compound'?: any;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "input",
            "baseName": "input",
            "type": "Array<string>"
        },
        {
            "name": "time",
            "baseName": "time",
            "type": "number"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "number"
        },
        {
            "name": "raw",
            "baseName": "raw",
            "type": "string"
        },
        {
            "name": "emotions",
            "baseName": "emotions",
            "type": "Array<Emotions>"
        },
        {
            "name": "compound",
            "baseName": "compound",
            "type": "any"
        }    ];

    static getAttributeTypeMap() {
        return TextEmotions.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
}

let typeMap: {[index: string]: any} = {
    "Emotions": Emotions,
    "ImageEmotions": ImageEmotions,
    "TextEmotions": TextEmotions,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum EmraysEmotionsApiApiKeys {
    ApiKeyAuth,
}

export class EmraysEmotionsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = true;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'ApiKeyAuth': new ApiKeyAuth('query', 'apikey'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    private validateResponse(responseBody) {
        if (responseBody === undefined) {
            return;
        }
        if (typeof responseBody === 'string') {
            // Weird unexpected string error response
            throw new Error(responseBody);
        }
        if (responseBody.error) {
            throw new Error(responseBody.error);
        }
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: EmraysEmotionsApiApiKeys, value: string) {
        (this.authentications as any)[EmraysEmotionsApiApiKeys[key]].apiKey = value;
    }
    /**
     * Specify an image in jpg format.
     * @summary Perform emotion analysis on an image.
     * @param file Image to detect emotions for. Must be in jpg format.
     * @param {*} [options] Override http request options.
     */
    public analyzeImage (file?: Buffer, options: any = {}) : Promise<ImageEmotions> {
        const localVarPath = this.basePath + '/emotions';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // Hack to Ensure Emray API is working for multi-part post request as it's not respecting a query string authkey param.
        localVarFormParams['apikey'] = this.authentications.ApiKeyAuth.apiKey;

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (file !== undefined) {
            localVarFormParams['file'] = {
                value: file,
                options : {
                    filename: 'dummy-filename.jpg'
                }
            };
        }
        localVarUseFormData = true;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<ImageEmotions>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    return reject(error);
                } 
                if(response.statusCode < 200 || response.statusCode > 299) {
                    return reject(new Error("HTTP call with failed with status code: " + response.statusCode + " and message: " + response.statusMessage));
                }
                try {
                    this.validateResponse(body);
                }
                catch(e) {
                    return reject(e);
                }
                let result:ImageEmotions = ObjectSerializer.deserialize(body, "ImageEmotions");
                resolve(result);
            });
        });
    }
    /**
     * Specify one or multiple text inputs to detect emotions for.
     * @summary Perform emotion analysis on text.
     * @param input Text to detect emotions for. Specify at least one, or optionally multiple strings. When providing a single string, the string is analyzed word-by-word. When providing multiple strings the strings are analyzed as a whole.
     * @param {*} [options] Override http request options.
     */
    public analyzeText (input: Array<string>, options: any = {}) : Promise<TextEmotions> {
        const localVarPath = this.basePath + '/emotions';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // Hack to Ensure Emray API is working for multi-part post request as it's not respecting a query string authkey param.
        localVarFormParams['apikey'] = this.authentications.ApiKeyAuth.apiKey;

        // verify required parameter 'input' is not null or undefined
        if (input === null || input === undefined) {
            throw new Error('Required parameter input was null or undefined when calling analyzeText.');
        }

        if (input !== undefined) {
            localVarQueryParameters['input'] = ObjectSerializer.serialize(input, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.ApiKeyAuth.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<TextEmotions>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    return reject(error);
                } 
                if(response.statusCode < 200 || response.statusCode > 299) {
                    return reject(new Error("HTTP call with failed with status code: " + response.statusCode + " and message: " + response.statusMessage));
                }
                try {
                    this.validateResponse(body);
                }
                catch(e) {
                    return reject(e);
                }
                let result:TextEmotions = ObjectSerializer.deserialize(body, "TextEmotions");
                resolve(result);
            });
        });
    }
}
